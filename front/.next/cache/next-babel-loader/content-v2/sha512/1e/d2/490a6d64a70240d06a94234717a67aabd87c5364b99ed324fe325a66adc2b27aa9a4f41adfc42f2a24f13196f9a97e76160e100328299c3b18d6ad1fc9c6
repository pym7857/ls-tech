{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/YOUNG/Documents/GitHub/ls-tech/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/YOUNG/Documents/GitHub/ls-tech/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\YOUNG\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\pages\\\\user.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport PostCard from '../components/PostCard';\n\nvar User = function User(_ref) {\n  _s();\n\n  var id = _ref.id;\n  // getInitialProps로부터 전달받은 props \n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo; // me: 내 정보, userInfo: 남의 정보 \n\n\n  useEffect(function () {\n    dispatch({\n      // 남의 정보 \n      type: LOAD_USER_REQUEST,\n      data: id\n    });\n    dispatch({\n      // 남의 게시글 \n      type: LOAD_USER_POSTS_REQUEST,\n      data: id\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [userInfo ? /*#__PURE__*/_jsxDEV(Card, {\n      actions: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\uC9F9\\uC9F9\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, _this), userInfo.Posts]\n      }, \"twit\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }, _this)],\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: userInfo.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 23\n        }, _this),\n        title: userInfo.nickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, _this) : null, mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, +c.createdAt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(User, \"WhKzBrIQX+GKoFi/goAZ5kdXvKw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = User;\nUser.propTypes = {\n  id: PropTypes.number.isRequired\n};\n\nUser.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('user getInitialProps', context.query.id);\n            return _context.abrupt(\"return\", {\n              id: parseInt(context.query.id, 10)\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/Users/YOUNG/Documents/GitHub/ls-tech/front/pages/user.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","Avatar","Card","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","PostCard","User","id","dispatch","state","post","mainPosts","user","userInfo","type","data","Posts","nickname","map","c","createdAt","propTypes","number","isRequired","getInitialProps","context","console","log","query","parseInt"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAY;AAAA;;AAAA,MAATC,EAAS,QAATA,EAAS;AAAE;AACzB,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AADuB,qBAEDC,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFV;AAAA,MAEfC,SAFe,gBAEfA,SAFe;;AAAA,sBAGFX,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHT;AAAA,MAGfC,QAHe,iBAGfA,QAHe,EAGgC;;;AAEvDhB,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,QAAQ,CAAC;AAAE;AACTM,MAAAA,IAAI,EAAEV,iBADC;AAEPW,MAAAA,IAAI,EAAER;AAFC,KAAD,CAAR;AAIAC,IAAAA,QAAQ,CAAC;AAAE;AACTM,MAAAA,IAAI,EAAEX,uBADC;AAEPY,MAAAA,IAAI,EAAER;AAFC,KAAD,CAAR;AAID,GATQ,EASN,EATM,CAAT;AAUA,sBACE;AAAA,eACGM,QAAQ,gBAEL,QAAC,IAAD;AACE,MAAA,OAAO,EAAE,cACP;AAAA,gDAEE;AAAA;AAAA;AAAA;AAAA,iBAFF,EAGGA,QAAQ,CAACG,KAHZ;AAAA,SAAS,MAAT;AAAA;AAAA;AAAA;AAAA,eADO,CADX;AAAA,6BASE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,MAAM,eAAE,QAAC,MAAD;AAAA,oBAASH,QAAQ,CAACI,QAAT,CAAkB,CAAlB;AAAT;AAAA;AAAA;AAAA;AAAA,iBADV;AAEE,QAAA,KAAK,EAAEJ,QAAQ,CAACI;AAFlB;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,aAFK,GAkBP,IAnBJ,EAoBGN,SAAS,CAACO,GAAV,CAAc,UAAAC,CAAC;AAAA,0BACd,QAAC,QAAD;AAA6B,QAAA,IAAI,EAAEA;AAAnC,SAAe,CAACA,CAAC,CAACC,SAAlB;AAAA;AAAA;AAAA;AAAA,eADc;AAAA,KAAf,CApBH;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AA0BD,CAzCD;;GAAMd,I;UACaP,W,EACKC,W,EACDA,W;;;KAHjBM,I;AA2CNA,IAAI,CAACe,SAAL,GAAiB;AACfd,EAAAA,EAAE,EAAET,SAAS,CAACwB,MAAV,CAAiBC;AADN,CAAjB;;AAIAjB,IAAI,CAACkB,eAAL;AAAA,uEAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,OAAO,CAACG,KAAR,CAAcrB,EAAlD;AADqB,6CAEd;AAAEA,cAAAA,EAAE,EAAEsB,QAAQ,CAACJ,OAAO,CAACG,KAAR,CAAcrB,EAAf,EAAmB,EAAnB;AAAd,aAFc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeD,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport PostCard from '../components/PostCard';\r\n\r\nconst User = ({ id }) => { // getInitialProps로부터 전달받은 props \r\n  const dispatch = useDispatch();\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const { userInfo } = useSelector(state => state.user); // me: 내 정보, userInfo: 남의 정보 \r\n\r\n  useEffect(() => {\r\n    dispatch({ // 남의 정보 \r\n      type: LOAD_USER_REQUEST,\r\n      data: id,\r\n    });\r\n    dispatch({ // 남의 게시글 \r\n      type: LOAD_USER_POSTS_REQUEST,\r\n      data: id,\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {userInfo\r\n        ? (\r\n          <Card\r\n            actions={[\r\n              <div key=\"twit\">\r\n                짹짹\r\n                <br />\r\n                {userInfo.Posts}\r\n              </div>,\r\n            ]}\r\n          >\r\n            <Card.Meta\r\n              avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n              title={userInfo.nickname}\r\n            />\r\n          </Card>\r\n        )\r\n        : \r\n        null }\r\n      {mainPosts.map(c => (\r\n        <PostCard key={+c.createdAt} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nUser.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n};\r\n\r\nUser.getInitialProps = async (context) => {\r\n  console.log('user getInitialProps', context.query.id);\r\n  return { id: parseInt(context.query.id, 10) }; // 서버로부터 받은 데이터 --> 프론트의 props로 전달 \r\n                                                 // 현재 파일: 9번째 줄 ! \r\n};\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}
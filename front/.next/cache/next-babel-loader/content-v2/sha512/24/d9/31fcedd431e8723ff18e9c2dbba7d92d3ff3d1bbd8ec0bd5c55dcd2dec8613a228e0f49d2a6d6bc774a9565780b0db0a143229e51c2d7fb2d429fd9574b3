{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ympark4\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\pages\\\\article.js\";\nimport React, { useEffect } from 'react';\nimport Link from 'next/link';\nimport { Card, Avatar, Icon } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport marked from 'marked';\nimport DOMPurify from \"dompurify\";\nimport { LIKE_POST_REQUEST, LOAD_ARTICLE_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\n\nconst Article = ({\n  id\n}) => {\n  // getInitialProps로부터 전달받은 props \n  //console.log(id);\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    article\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_ARTICLE_REQUEST,\n      data: id\n    });\n  }, []);\n  const liked = me && article.Likers && article.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \n\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: id\n      });\n    } else {\n      // 좋아요 안 누른 상태에서, 하트를 누르면 \n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: id\n      });\n    }\n  }, [me && me.id, article && id, liked]); // markdown 형식 -> 일반 글 형식 \n\n  const PreviewPanel = props => {\n    // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\n    marked.setOptions({\n      renderer: new marked.Renderer(),\n      gfm: true,\n      breaks: true\n    });\n    console.log('props: ', props);\n    const output = DOMPurify.sanitize(marked(props.mdText)); //console.log('output: ', output);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"preview\",\n      dangerouslySetInnerHTML: {\n        __html: output\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  };\n\n  console.log('article: ', article);\n  return (\n    /*#__PURE__*/\n    // 해당 제목에 해당하는 게시글 보여줌 \n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#ECECEC',\n          padding: '30px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          actions: [/*#__PURE__*/_jsxDEV(Icon, {\n            type: \"heart\",\n            theme: liked ? 'twoTone' : 'outlined',\n            twoToneColor: \"#eb2f96\",\n            onClick: onToggleLike\n          }, \"heart\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)],\n          title: article.title,\n          bordered: false,\n          children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n            description: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(PreviewPanel, {\n                mdText: 'd'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)\n        }, +article.createdAt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  );\n};\n\nArticle.propTypes = {\n  id: PropTypes.number.isRequired\n};\n\nArticle.getInitialProps = async context => {\n  console.log('article getInitialProps', context.query.id);\n  return {\n    id: context.query.id\n  }; // 서버로부터 받은 데이터 --> 프론트의 props로 전달 \n  // 현재 파일: 7번째 줄 ! \n};\n\nexport default Article;","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/pages/article.js"],"names":["React","useEffect","Link","Card","Avatar","Icon","PropTypes","useDispatch","useSelector","marked","DOMPurify","LIKE_POST_REQUEST","LOAD_ARTICLE_REQUEST","UNLIKE_POST_REQUEST","Article","id","dispatch","me","state","user","article","post","type","data","liked","Likers","find","v","onToggleLike","useCallback","alert","PreviewPanel","props","setOptions","renderer","Renderer","gfm","breaks","console","log","output","sanitize","mdText","__html","background","padding","title","createdAt","propTypes","number","isRequired","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { Card, Avatar, Icon } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport marked from 'marked';\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport { LIKE_POST_REQUEST, LOAD_ARTICLE_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\r\n\r\nconst Article = ({ id }) => { // getInitialProps로부터 전달받은 props \r\n    //console.log(id);\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector(state => state.user);\r\n    const { article } = useSelector(state => state.post);\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: LOAD_ARTICLE_REQUEST,\r\n            data: id,\r\n        });\r\n    }, []);\r\n\r\n    const liked = me && article.Likers && article.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        if (liked) { // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: id,\r\n            });\r\n        } else { // 좋아요 안 누른 상태에서, 하트를 누르면 \r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: id,\r\n            });\r\n        }\r\n    }, [me && me.id, article && id, liked]);\r\n\r\n    // markdown 형식 -> 일반 글 형식 \r\n    const PreviewPanel = (props) => { // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\r\n        marked.setOptions({\r\n            renderer: new marked.Renderer(),   \r\n            gfm: true,\r\n            breaks: true,\r\n        });\r\n\r\n        console.log('props: ', props)\r\n        const output = DOMPurify.sanitize(marked(props.mdText));\r\n        //console.log('output: ', output);\r\n        return (\r\n            <div \r\n                id='preview' \r\n                dangerouslySetInnerHTML= {{__html: output}}\r\n            />\r\n        );\r\n    }\r\n\r\n    console.log('article: ', article);\r\n\r\n    return ( // 해당 제목에 해당하는 게시글 보여줌 \r\n        <div>\r\n            <div style={{ background: '#ECECEC', padding: '30px' }}>\r\n                <Card \r\n                    key={+article.createdAt}\r\n                    actions={[\r\n                        <Icon \r\n                            type=\"heart\" \r\n                            key=\"heart\"\r\n                            theme={liked ? 'twoTone' : 'outlined'}\r\n                            twoToneColor=\"#eb2f96\"\r\n                            onClick={onToggleLike} \r\n                        />\r\n                    ]}\r\n                    title={article.title} \r\n                    bordered={false} \r\n                >\r\n                    <Card.Meta\r\n                        description={(\r\n                            <div>\r\n                                <PreviewPanel mdText={'d'}/>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                    </Card.Meta>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nArticle.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n};\r\n\r\nArticle.getInitialProps = async (context) => {\r\n  console.log('article getInitialProps', context.query.id);\r\n  return { id: context.query.id }; // 서버로부터 받은 데이터 --> 프론트의 props로 전달 \r\n                                     // 현재 파일: 7번째 줄 ! \r\n};\r\n\r\nexport default Article;"]},"metadata":{},"sourceType":"module"}
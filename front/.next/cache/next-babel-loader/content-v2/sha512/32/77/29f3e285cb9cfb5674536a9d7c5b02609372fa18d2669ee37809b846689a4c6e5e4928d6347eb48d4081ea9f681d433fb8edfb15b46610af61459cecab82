{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ympark4\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\pages\\\\_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper'; // 현재props로 store를 넣어줄 부분이 없는데, 그 역할을 wrapper 패키지가 해준다\n\nimport { Provider } from 'react-redux'; // Provider: redux state 중앙 통제실 \n\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport '../styles/globals.css';\n\nconst LsTech = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  // Component: next에서 넣어주는 props,   store: state, action, reducer가 합쳐진 것 \n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"ls-tech\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.17.0/antd.css\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AppLayout, {\n      children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\nLsTech.propTypes = {\n  Component: PropTypes.elementType,\n  // any\n  store: PropTypes.object,\n  pageProps: PropTypes.object.isRequired\n};\n\nLsTech.getInitialProps = async context => {\n  // next에서 context내려줌 (=next가 실행해주는 부분)\n  //console.log(context);\n  const {\n    ctx,\n    Component\n  } = context; // Component = 페이지들 (윗줄 참조)\n\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    // 없을수도 있으니까 if문으로 감싸자 \n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n}; // 이 부분은 그냥 암기 \n\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) // 배포용일때\n  : compose( // 개발용일때 \n  applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(LsTech); // HOC","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/pages/_app.js"],"names":["React","Head","PropTypes","withRedux","Provider","applyMiddleware","compose","createStore","createSagaMiddleware","AppLayout","reducer","rootSaga","LsTech","Component","store","pageProps","propTypes","elementType","object","isRequired","getInitialProps","context","ctx","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAA4C;;AAC5C,SAASC,QAAT,QAAyB,aAAzB,C,CAAwC;;AACxC,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAO,uBAAP;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAAD,KAAsC;AAAE;AACnD,sBACI,QAAC,QAAD;AAAU,IAAA,KAAK,EAAED,KAAjB;AAAA,4BACI,QAAC,IAAD;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,GAAG,EAAC,YAAV;AAAuB,QAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,SAAD;AAAA,6BACI,QAAC,SAAD,oBAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAZD;;AAcAH,MAAM,CAACI,SAAP,GAAmB;AACfH,EAAAA,SAAS,EAAEX,SAAS,CAACe,WADN;AACmB;AAClCH,EAAAA,KAAK,EAAEZ,SAAS,CAACgB,MAFF;AAGfH,EAAAA,SAAS,EAAEb,SAAS,CAACgB,MAAV,CAAiBC;AAHb,CAAnB;;AAMAP,MAAM,CAACQ,eAAP,GAAyB,MAAOC,OAAP,IAAmB;AAAE;AAC1C;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOT,IAAAA;AAAP,MAAqBQ,OAA3B,CAFwC,CAEJ;;AACpC,MAAIN,SAAS,GAAG,EAAhB;;AACA,MAAIF,SAAS,CAACO,eAAd,EAA+B;AAAE;AAC/BL,IAAAA,SAAS,GAAG,MAAMF,SAAS,CAACO,eAAV,CAA0BE,GAA1B,CAAlB;AACD;;AACD,SAAO;AAAEP,IAAAA;AAAF,GAAP;AACH,CARD,C,CAUA;;;AACA,MAAMQ,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC9C,QAAMC,cAAc,GAAGlB,oBAAoB,EAA3C;AACA,QAAMmB,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACbtB,OAAO,CAACD,eAAe,CAAC,GAAGsB,WAAJ,CAAhB,CADM,CAC4B;AAD5B,IAEbrB,OAAO,EAAE;AACTD,EAAAA,eAAe,CAAC,GAAGsB,WAAJ,CADR,EAEP,CAACF,OAAO,CAACI,QAAT,IAAqB,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WAApE,GAAkFD,MAAM,CAACC,4BAAP,EAAlF,GAA0HC,CAAC,IAAIA,CAFxH,CAFX;AAMA,QAAMlB,KAAK,GAAGP,WAAW,CAACG,OAAD,EAAUc,YAAV,EAAwBI,QAAxB,CAAzB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBtB,QAAnB;AACA,SAAOG,KAAP;AACH,CAZD;;AAcA,eAAeX,SAAS,CAACoB,cAAD,CAAT,CAA0BX,MAA1B,CAAf,C,CAAkD","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport withRedux from 'next-redux-wrapper'; // 현재props로 store를 넣어줄 부분이 없는데, 그 역할을 wrapper 패키지가 해준다\r\nimport { Provider } from 'react-redux'; // Provider: redux state 중앙 통제실 \r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nimport '../styles/globals.css';\r\n\r\nconst LsTech = ({ Component, store, pageProps  }) => { // Component: next에서 넣어주는 props,   store: state, action, reducer가 합쳐진 것 \r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>ls-tech</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.17.0/antd.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n};\r\n\r\nLsTech.propTypes = {\r\n    Component: PropTypes.elementType, // any\r\n    store: PropTypes.object,\r\n    pageProps: PropTypes.object.isRequired,\r\n};\r\n\r\nLsTech.getInitialProps = async (context) => { // next에서 context내려줌 (=next가 실행해주는 부분)\r\n    //console.log(context);\r\n    const { ctx, Component } = context; // Component = 페이지들 (윗줄 참조)\r\n    let pageProps = {};\r\n    if (Component.getInitialProps) { // 없을수도 있으니까 if문으로 감싸자 \r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n    return { pageProps };\r\n};\r\n\r\n// 이 부분은 그냥 암기 \r\nconst configureStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares)) // 배포용일때\r\n      : compose( // 개발용일때 \r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n  \r\nexport default withRedux(configureStore)(LsTech); // HOC"]},"metadata":{},"sourceType":"module"}
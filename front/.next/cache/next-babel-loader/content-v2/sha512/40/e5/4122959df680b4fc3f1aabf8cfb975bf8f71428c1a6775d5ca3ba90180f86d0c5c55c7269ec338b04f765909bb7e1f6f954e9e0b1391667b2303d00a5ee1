{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [],\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  hashTags: []\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const LOAD_ALL_HASHTAGS_REQUEST = 'LOAD_ALL_HASHTAGS_REQUEST';\nexport const LOAD_ALL_HASHTAGS_SUCCESS = 'LOAD_ALL_HASHTAGS_SUCCESS';\nexport const LOAD_ALL_HASHTAGS_FAILURE = 'LOAD_ALL_HASHTAGS_FAILURE';\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: false,\n          mainPosts: [action.data, ...state.mainPosts],\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: action.data\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); // 내가 '좋아요' 누른 게시물이 몇번째 포스트인지 \n\n        const post = state.mainPosts[postIndex];\n        const Likers = [{\n          id: action.data.userId\n        }, ...post.Likers]; // '좋아요'누른 사람목록에 내 이름 추가 \n\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread(_objectSpread({}, post), {}, {\n          Likers\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Likers = post.Likers.filter(v => v.id !== action.data.userId); // '좋아요'누른 사람목록에서 내 이름 빼기 (=필터링) \n\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread(_objectSpread({}, post), {}, {\n          Likers\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_ALL_HASHTAGS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_ALL_HASHTAGS_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hashTags: action.data\n        });\n      }\n\n    case LOAD_ALL_HASHTAGS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/reducers/post.js"],"names":["initialState","mainPosts","addPostErrorReason","isAddingPost","postAdded","hashTags","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_ALL_HASHTAGS_REQUEST","LOAD_ALL_HASHTAGS_SUCCESS","LOAD_ALL_HASHTAGS_FAILURE","reducer","state","action","type","data","error","postIndex","findIndex","v","id","postId","post","Likers","userId","filter"],"mappings":"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","sourcesContent":["export const initialState = {\r\n    mainPosts: [],\r\n    addPostErrorReason: '', // 포스트 업로드 실패 사유\r\n    isAddingPost: false, // 포스트 업로드 중\r\n    postAdded: false, // 포스트 업로드 성공\r\n    hashTags: [],\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_ALL_HASHTAGS_REQUEST = 'LOAD_ALL_HASHTAGS_REQUEST';\r\nexport const LOAD_ALL_HASHTAGS_SUCCESS = 'LOAD_ALL_HASHTAGS_SUCCESS';\r\nexport const LOAD_ALL_HASHTAGS_FAILURE = 'LOAD_ALL_HASHTAGS_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST: {\r\n          return {\r\n            ...state,\r\n            isAddingPost: true,\r\n            addPostErrorReason: '',\r\n            postAdded: false,\r\n          };\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            isAddingPost: false,\r\n            mainPosts: [action.data, ...state.mainPosts],\r\n            postAdded: true,\r\n          };\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n          return {\r\n            ...state,\r\n            isAddingPost: false,\r\n            addPostErrorReason: action.error,\r\n          };\r\n        }\r\n        case LOAD_MAIN_POSTS_REQUEST:\r\n        case LOAD_HASHTAG_POSTS_REQUEST:\r\n        case LOAD_USER_POSTS_REQUEST: {\r\n          return {\r\n            ...state,\r\n            mainPosts: [],\r\n          };\r\n        }\r\n        case LOAD_MAIN_POSTS_SUCCESS:\r\n        case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        case LOAD_USER_POSTS_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            mainPosts: action.data,\r\n          };\r\n        }\r\n        case LOAD_MAIN_POSTS_FAILURE:\r\n        case LOAD_HASHTAG_POSTS_FAILURE:\r\n        case LOAD_USER_POSTS_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case LIKE_POST_REQUEST: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case LIKE_POST_SUCCESS: {\r\n          const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); // 내가 '좋아요' 누른 게시물이 몇번째 포스트인지 \r\n          const post = state.mainPosts[postIndex];\r\n          const Likers = [{ id: action.data.userId }, ...post.Likers]; // '좋아요'누른 사람목록에 내 이름 추가 \r\n          const mainPosts = [...state.mainPosts];\r\n          mainPosts[postIndex] = { ...post, Likers };\r\n          return {\r\n            ...state,\r\n            mainPosts,\r\n          };\r\n        }\r\n        case LIKE_POST_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case UNLIKE_POST_REQUEST: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case UNLIKE_POST_SUCCESS: {\r\n          const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n          const post = state.mainPosts[postIndex];\r\n          const Likers = post.Likers.filter(v => v.id !== action.data.userId); // '좋아요'누른 사람목록에서 내 이름 빼기 (=필터링) \r\n          const mainPosts = [...state.mainPosts];\r\n          mainPosts[postIndex] = { ...post, Likers };\r\n          return {\r\n            ...state,\r\n            mainPosts,\r\n          };\r\n        }\r\n        case UNLIKE_POST_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case LOAD_ALL_HASHTAGS_REQUEST: {\r\n          return {\r\n            ...state,\r\n          }\r\n        }\r\n        case LOAD_ALL_HASHTAGS_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            hashTags: action.data,\r\n          }\r\n        }\r\n        case LOAD_ALL_HASHTAGS_FAILURE: {\r\n          return {\r\n            ...state,\r\n          }\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}
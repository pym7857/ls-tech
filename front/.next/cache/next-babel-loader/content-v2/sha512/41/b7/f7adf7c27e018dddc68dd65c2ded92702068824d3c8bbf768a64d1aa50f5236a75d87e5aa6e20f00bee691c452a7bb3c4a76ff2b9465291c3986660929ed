{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LOAD_ALL_HASHTAGS_FAILURE, LOAD_ALL_HASHTAGS_REQUEST, LOAD_ALL_HASHTAGS_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(result);\n    yield put({\n      // post reducer의 데이터를 수정 \n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user reducer의 데이터를 수정 \n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 로그인안한 사용자들도 글 목록 볼 수 있음 --> withCredentials: true 넣어줄 필요 X \n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        // 해당 게시물 id \n        userId: result.data.userId // 좋아요 누른사람의 id \n\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        // 해당 게시물 id \n        userId: result.data.userId // 좋아요 취소한사람의 id \n\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction loadAllHashtagsAPI() {\n  return axios.get(`/hashtags`);\n}\n\nfunction* loadAllHashtags() {\n  try {\n    const result = yield call(loadAllHashtagsAPI);\n    yield put({\n      type: LOAD_ALL_HASHTAGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_ALL_HASHTAGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadAllHashtags() {\n  yield takeLatest(LOAD_ALL_HASHTAGS_REQUEST, loadAllHashtags);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadAllHashtags)]);\n}","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LOAD_ALL_HASHTAGS_FAILURE","LOAD_ALL_HASHTAGS_REQUEST","LOAD_ALL_HASHTAGS_SUCCESS","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","console","log","type","id","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","likePostAPI","postId","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","loadAllHashtagsAPI","loadAllHashtags","watchLoadAllHashtags","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,iBANF,EAOEC,0BAPF,EAQEC,0BARF,EASEC,0BATF,EAUEC,uBAVF,EAWEC,uBAXF,EAYEC,uBAZF,EAaEC,uBAbF,EAcEC,uBAdF,EAeEC,uBAfF,EAgBEC,mBAhBF,EAiBEC,mBAjBF,EAkBEC,mBAlBF,EAmBEC,yBAnBF,EAoBEC,yBApBF,EAqBEC,yBArBF,QAsBO,kBAtBP;AAuBA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,SAAOxB,KAAK,CAACyB,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACnCE,IAAAA,eAAe,EAAE;AADkB,GAA9B,CAAP;AAGD;;AACD,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM9B,IAAI,CAACwB,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,UAAMhC,GAAG,CAAC;AAAE;AACVoC,MAAAA,IAAI,EAAE9B,gBADE;AAER2B,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAIA,UAAMjC,GAAG,CAAC;AAAE;AACVoC,MAAAA,IAAI,EAAEX,cADE;AAERQ,MAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,CAAYI;AAFV,KAAD,CAAT;AAID,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,UAAMtC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAEhC,gBADE;AAERmC,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AACD,UAAUE,YAAV,GAAyB;AACvB,QAAMzC,UAAU,CAACM,gBAAD,EAAmByB,OAAnB,CAAhB;AACD;;AAED,SAASW,gBAAT,GAA4B;AAC1B,SAAOtC,KAAK,CAACuC,GAAN,CAAU,QAAV,CAAP,CAD0B,CACE;AAC7B;;AACD,UAAUC,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMX,MAAM,GAAG,MAAM9B,IAAI,CAACuC,gBAAD,CAAzB;AACA,UAAMzC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAErB,uBADE;AAERkB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOK,CAAP,EAAU;AACV,UAAMtC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAEvB,uBADE;AAER0B,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AACD,UAAUM,kBAAV,GAA+B;AAC7B,QAAM7C,UAAU,CAACe,uBAAD,EAA0B6B,aAA1B,CAAhB;AACD;;AAED,SAASE,mBAAT,CAA6BC,GAA7B,EAAkC;AAChC,SAAO3C,KAAK,CAACuC,GAAN,CAAW,YAAWI,GAAI,EAA1B,CAAP;AACD;;AACD,UAAUC,gBAAV,CAA2BhB,MAA3B,EAAmC;AACjC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM9B,IAAI,CAAC2C,mBAAD,EAAsBd,MAAM,CAACE,IAA7B,CAAzB;AACA,UAAMjC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAExB,0BADE;AAERqB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOK,CAAP,EAAU;AACV,UAAMtC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAE1B,0BADE;AAER6B,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AACD,UAAUU,qBAAV,GAAkC;AAChC,QAAMjD,UAAU,CAACY,0BAAD,EAA6BoC,gBAA7B,CAAhB;AACD;;AAED,SAASE,gBAAT,CAA0BZ,EAA1B,EAA8B;AAC5B,SAAOlC,KAAK,CAACuC,GAAN,CAAW,SAAQL,EAAG,QAAtB,CAAP;AACD;;AACD,UAAUa,aAAV,CAAwBnB,MAAxB,EAAgC;AAC9B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM9B,IAAI,CAAC+C,gBAAD,EAAmBlB,MAAM,CAACE,IAA1B,CAAzB;AACA,UAAMjC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAElB,uBADE;AAERe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOK,CAAP,EAAU;AACV,UAAMtC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAEpB,uBADE;AAERuB,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AACD,UAAUa,kBAAV,GAA+B;AAC7B,QAAMpD,UAAU,CAACkB,uBAAD,EAA0BiC,aAA1B,CAAhB;AACD;;AAED,SAASE,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOlD,KAAK,CAACyB,IAAN,CAAY,SAAQyB,MAAO,OAA3B,EAAmC,EAAnC,EAAuC;AAC5CxB,IAAAA,eAAe,EAAE;AAD2B,GAAvC,CAAP;AAGD;;AACD,UAAUyB,QAAV,CAAmBvB,MAAnB,EAA2B;AACzB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM9B,IAAI,CAACkD,WAAD,EAAcrB,MAAM,CAACE,IAArB,CAAzB;AACA,UAAMjC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAE3B,iBADE;AAERwB,MAAAA,IAAI,EAAE;AACJoB,QAAAA,MAAM,EAAEtB,MAAM,CAACE,IADX;AACiB;AACrBsB,QAAAA,MAAM,EAAEvB,MAAM,CAACC,IAAP,CAAYsB,MAFhB,CAEwB;;AAFxB;AAFE,KAAD,CAAT;AAOD,GATD,CASE,OAAOjB,CAAP,EAAU;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACA,UAAMtC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAE7B,iBADE;AAERgC,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AACD,UAAUkB,aAAV,GAA0B;AACxB,QAAMzD,UAAU,CAACS,iBAAD,EAAoB8C,QAApB,CAAhB;AACD;;AAED,SAASG,aAAT,CAAuBJ,MAAvB,EAA+B;AAC7B,SAAOlD,KAAK,CAACuD,MAAN,CAAc,SAAQL,MAAO,OAA7B,EAAqC;AAC1CxB,IAAAA,eAAe,EAAE;AADyB,GAArC,CAAP;AAGD;;AACD,UAAU8B,UAAV,CAAqB5B,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM9B,IAAI,CAACuD,aAAD,EAAgB1B,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMjC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAEf,mBADE;AAERY,MAAAA,IAAI,EAAE;AACJoB,QAAAA,MAAM,EAAEtB,MAAM,CAACE,IADX;AACiB;AACrBsB,QAAAA,MAAM,EAAEvB,MAAM,CAACC,IAAP,CAAYsB,MAFhB,CAEwB;;AAFxB;AAFE,KAAD,CAAT;AAOD,GATD,CASE,OAAOjB,CAAP,EAAU;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACA,UAAMtC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAEjB,mBADE;AAERoB,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AACD,UAAUsB,eAAV,GAA4B;AAC1B,QAAM7D,UAAU,CAACqB,mBAAD,EAAsBuC,UAAtB,CAAhB;AACD;;AAED,SAASE,kBAAT,GAA8B;AAC5B,SAAO1D,KAAK,CAACuC,GAAN,CAAW,WAAX,CAAP;AACD;;AACD,UAAUoB,eAAV,GAA4B;AAC1B,MAAI;AACF,UAAM9B,MAAM,GAAG,MAAM9B,IAAI,CAAC2D,kBAAD,CAAzB;AACA,UAAM7D,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAEZ,yBADE;AAERS,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOK,CAAP,EAAU;AACV,UAAMtC,GAAG,CAAC;AACRoC,MAAAA,IAAI,EAAEd,yBADE;AAERiB,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AACD,UAAUyB,oBAAV,GAAiC;AAC/B,QAAMhE,UAAU,CAACwB,yBAAD,EAA4BuC,eAA5B,CAAhB;AACD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMnE,GAAG,CAAC,CACRC,IAAI,CAAC8C,kBAAD,CADI,EAER9C,IAAI,CAAC0C,YAAD,CAFI,EAGR1C,IAAI,CAACkD,qBAAD,CAHI,EAIRlD,IAAI,CAACqD,kBAAD,CAJI,EAKRrD,IAAI,CAAC0D,aAAD,CALI,EAMR1D,IAAI,CAAC8D,eAAD,CANI,EAOR9D,IAAI,CAACiE,oBAAD,CAPI,CAAD,CAAT;AASD","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS, \r\n  UNLIKE_POST_FAILURE, \r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  LOAD_ALL_HASHTAGS_FAILURE,\r\n  LOAD_ALL_HASHTAGS_REQUEST,\r\n  LOAD_ALL_HASHTAGS_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    console.log(result);\r\n    yield put({ // post reducer의 데이터를 수정 \r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({ // user reducer의 데이터를 수정 \r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id, \r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n  return axios.get('/posts'); // 로그인안한 사용자들도 글 목록 볼 수 있음 --> withCredentials: true 넣어줄 필요 X \r\n}\r\nfunction* loadMainPosts() {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`);\r\n}\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`);\r\n}\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data, // 해당 게시물 id \r\n        userId: result.data.userId, // 좋아요 누른사람의 id \r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}/like`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data, // 해당 게시물 id \r\n        userId: result.data.userId, // 좋아요 취소한사람의 id \r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction loadAllHashtagsAPI() {\r\n  return axios.get(`/hashtags`);\r\n}\r\nfunction* loadAllHashtags() {\r\n  try {\r\n    const result = yield call(loadAllHashtagsAPI);\r\n    yield put({\r\n      type: LOAD_ALL_HASHTAGS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_ALL_HASHTAGS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadAllHashtags() {\r\n  yield takeLatest(LOAD_ALL_HASHTAGS_REQUEST, loadAllHashtags);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchLoadAllHashtags),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}
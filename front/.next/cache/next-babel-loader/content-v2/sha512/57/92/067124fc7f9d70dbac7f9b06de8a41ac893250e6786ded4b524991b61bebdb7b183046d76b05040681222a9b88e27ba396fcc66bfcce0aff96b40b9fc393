{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ympark4\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\components\\\\ArticleCard.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Icon, Card, Avatar, Button } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport marked from 'marked';\nimport DOMPurify from \"dompurify\";\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\n\nconst ArticleCard = ({\n  article\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const liked = me && article.Likers && article.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \n\n  console.log('liked:', liked);\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: article.id\n      });\n    } else {\n      // 좋아요 안 누른 상태에서, 하트를 누르면 \n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: article.id\n      });\n    }\n  }, [me && me.id, article && article.id, liked]); // markdown 형식 -> 일반 글 형식 \n\n  const PreviewPanel = props => {\n    // article.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\n    // source : https://marked.js.org/using_advanced#options\n    marked.setOptions({\n      renderer: new marked.Renderer(),\n      // An object containing functions to render tokens to HTML. See extensibility for more details. \n      gfm: true,\n      // If true, use approved GitHub Flavored Markdown (GFM) specification.\n      breaks: true // If true, add <br> on a single line break (copies GitHub behavior on comments, but not on rendered markdown files). Requires gfm be true.\n\n    });\n    const output = DOMPurify.sanitize(marked(props.mdText)); //console.log('output: ', output);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"preview\",\n      dangerouslySetInnerHTML: {\n        __html: output\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }; //console.log('(article card) article:', article);\n\n\n  return (\n    /*#__PURE__*/\n    // 해당 제목에 해당하는 게시글 보여줌 \n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#ECECEC',\n          padding: '30px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: article.title,\n          bordered: false,\n          actions: [/*#__PURE__*/_jsxDEV(Icon, {\n            type: \"heart\",\n            theme: liked ? 'twoTone' : 'outlined',\n            twoToneColor: \"#eb2f96\",\n            onClick: onToggleLike\n          }, \"heart\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)],\n          children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n            avatar: /*#__PURE__*/_jsxDEV(Link, {\n              href: {\n                pathname: '/user',\n                query: {\n                  id: article.User.id\n                }\n              },\n              as: `/user/${article.User.id}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: article.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this),\n            title: article.User.nickname,\n            description: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(PreviewPanel, {\n                  mdText: article.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this), article.content.split(/(#[^\\s]+)/g).map(v => {\n                // 해시태그인 애들은 Link로 감싸준다 \n                if (v.match(/(#[\\S]+)/)) {\n                  // ex) #사과<li>\n                  //console.log(v.split('<')[0].slice(1));\n                  return /*#__PURE__*/_jsxDEV(Link, {\n                    href: {\n                      pathname: '/hashtag',\n                      query: {\n                        tag: v.split('<')[0].slice(1)\n                      }\n                    },\n                    as: `/hashtag/${v.split('<')[0].slice(1)}`,\n                    children: /*#__PURE__*/_jsxDEV(\"a\", {\n                      style: {\n                        color: '#3f729b'\n                      },\n                      children: [\"#\", v.split('<')[0].slice(1), \" \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 49\n                    }, this)\n                  }, v, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 45\n                  }, this);\n                } //return v; // 해시태그 아닌애들은 그냥 문자열 리턴 \n\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this)\n        }, +article.createdAt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  );\n};\n\nArticleCard.propTypes = {\n  article: PropTypes.shape({\n    // shape: 객체 상태 \n    title: PropTypes.string,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default ArticleCard;","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/components/ArticleCard.js"],"names":["React","useCallback","useEffect","useState","Link","PropTypes","Icon","Card","Avatar","Button","useDispatch","useSelector","marked","DOMPurify","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","ArticleCard","article","me","state","user","dispatch","liked","Likers","find","v","id","console","log","onToggleLike","alert","type","data","PreviewPanel","props","setOptions","renderer","Renderer","gfm","breaks","output","sanitize","mdText","__html","background","padding","title","pathname","query","User","nickname","content","split","map","match","tag","slice","color","createdAt","propTypes","shape","string","object"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon, Card, Avatar, Button } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport marked from 'marked';\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport {\r\n    LIKE_POST_REQUEST,\r\n    UNLIKE_POST_REQUEST,\r\n  } from '../reducers/post';\r\n\r\nconst ArticleCard = ({ article }) => {\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = me && article.Likers && article.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \r\n\r\n    console.log('liked:', liked);\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        if (liked) { // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: article.id,\r\n            });\r\n        } else { // 좋아요 안 누른 상태에서, 하트를 누르면 \r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: article.id,\r\n            });\r\n        }\r\n    }, [me && me.id, article && article.id, liked]);\r\n\r\n    // markdown 형식 -> 일반 글 형식 \r\n    const PreviewPanel = (props) => { // article.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\r\n        // source : https://marked.js.org/using_advanced#options\r\n        marked.setOptions({ \r\n            renderer: new marked.Renderer(), // An object containing functions to render tokens to HTML. See extensibility for more details. \r\n            gfm: true, // If true, use approved GitHub Flavored Markdown (GFM) specification.\r\n            breaks: true, // If true, add <br> on a single line break (copies GitHub behavior on comments, but not on rendered markdown files). Requires gfm be true.\r\n        });\r\n\r\n        const output = DOMPurify.sanitize(marked(props.mdText));\r\n        //console.log('output: ', output);\r\n        return (\r\n            <div \r\n                id='preview' \r\n                dangerouslySetInnerHTML= {{__html: output}}\r\n            />\r\n        );\r\n    }\r\n\r\n    //console.log('(article card) article:', article);\r\n\r\n    return ( // 해당 제목에 해당하는 게시글 보여줌 \r\n        <div>\r\n            <div style={{ background: '#ECECEC', padding: '30px' }}>\r\n                <Card \r\n                    key={+article.createdAt}\r\n                    title={article.title} \r\n                    bordered={false} \r\n                    actions={[\r\n                        <Icon \r\n                            type=\"heart\" \r\n                            key=\"heart\"\r\n                            theme={liked ? 'twoTone' : 'outlined'}\r\n                            twoToneColor=\"#eb2f96\"\r\n                            onClick={onToggleLike} \r\n                        />\r\n                    ]}\r\n                >\r\n                    <Card.Meta\r\n                        avatar={(\r\n                            <Link href={{ pathname: '/user', query: { id: article.User.id } }} as={`/user/${article.User.id}`}>\r\n                                <a><Avatar>{article.User.nickname[0]}</Avatar></a>\r\n                            </Link>\r\n                        )}\r\n                        title={article.User.nickname}\r\n                        description={(\r\n                            <div>\r\n                                <div>\r\n                                    <PreviewPanel mdText={article.content}/>\r\n                                </div>\r\n\r\n                                <hr />\r\n\r\n                                {article.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                                    // 해시태그인 애들은 Link로 감싸준다 \r\n                                    if (v.match(/(#[\\S]+)/)) { // ex) #사과<li>\r\n                                        //console.log(v.split('<')[0].slice(1));\r\n                                        return (\r\n                                            <Link href={{ pathname: '/hashtag', query: { tag: v.split('<')[0].slice(1) } }} as={`/hashtag/${v.split('<')[0].slice(1)}`} key={v}>\r\n                                                <a style={{ color: '#3f729b' }}>#{v.split('<')[0].slice(1)} </a>\r\n                                            </Link>\r\n                                        );\r\n                                    }\r\n                                    //return v; // 해시태그 아닌애들은 그냥 문자열 리턴 \r\n                                })}\r\n\r\n                            </div>\r\n                        )}\r\n                    >\r\n                    </Card.Meta>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nArticleCard.propTypes = {\r\n    article: PropTypes.shape({ // shape: 객체 상태 \r\n        title:  PropTypes.string,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\nexport default ArticleCard;"]},"metadata":{},"sourceType":"module"}
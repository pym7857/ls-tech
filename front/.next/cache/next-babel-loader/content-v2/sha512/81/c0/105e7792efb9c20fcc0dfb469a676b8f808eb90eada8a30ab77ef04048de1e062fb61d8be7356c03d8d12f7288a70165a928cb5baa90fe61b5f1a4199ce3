{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ympark4\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\components\\\\ArticleCard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport PropTypes, { nominalTypeHack } from 'prop-types';\nimport { Form, Input, Icon, Card, Avatar, Button } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport marked from 'marked';\nimport DOMPurify from \"dompurify\";\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\n\nvar ArticleCard = function ArticleCard(_ref) {\n  _s();\n\n  var article = _ref.article;\n  console.log(article);\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var dispatch = useDispatch(); // const liked = me && post.Likers && post.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \n  // const onToggleLike = useCallback(() => {\n  //     if (!me) {\n  //         return alert('로그인이 필요합니다!');\n  //     }\n  //     if (liked) { // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \n  //         dispatch({\n  //             type: UNLIKE_POST_REQUEST,\n  //             data: post.id,\n  //         });\n  //     } else { // 좋아요 안 누른 상태에서, 하트를 누르면 \n  //         dispatch({\n  //             type: LIKE_POST_REQUEST,\n  //             data: post.id,\n  //         });\n  //     }\n  // }, [me && me.id, post && post.id, liked]);\n  // markdown 형식 -> 일반 글 형식 \n\n  var PreviewPanel = function PreviewPanel(props) {\n    // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\n    marked.setOptions({\n      renderer: new marked.Renderer(),\n      gfm: true,\n      breaks: true\n    });\n    var output = DOMPurify.sanitize(marked(props.mdText)); //console.log('output: ', output);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"preview\",\n      dangerouslySetInnerHTML: {\n        __html: output\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, _this);\n  }; //console.log('mainPosts: ', post)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#ECECEC',\n        padding: '30px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        title: 'ddd',\n        bordered: false,\n        style: {\n          width: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n          description: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(PreviewPanel, {\n              mdText: 'ddd'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(ArticleCard, \"GYbMNKbS/FciuPKImcdtGrBTplM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ArticleCard;\nArticleCard.propTypes = {\n  article: PropTypes.shape({// shape: 객체 상태 \n    // User: PropTypes.object,\n    // content: PropTypes.string,\n    // createdAt: PropTypes.object,\n  })\n};\nexport default ArticleCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArticleCard\");","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/components/ArticleCard.js"],"names":["React","useCallback","useEffect","useState","Link","PropTypes","nominalTypeHack","Form","Input","Icon","Card","Avatar","Button","useDispatch","useSelector","marked","DOMPurify","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","ArticleCard","article","console","log","state","user","me","dispatch","PreviewPanel","props","setOptions","renderer","Renderer","gfm","breaks","output","sanitize","mdText","__html","background","padding","width","propTypes","shape"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,IAAoBC,eAApB,QAA2C,YAA3C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,MAAlC,EAA0CC,MAA1C,QAAwD,MAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,SACEC,iBADF,EAEEC,mBAFF,QAGO,kBAHP;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAiB;AAAA;;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AADiC,qBAElBN,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFO;AAAA,MAEzBC,EAFyB,gBAEzBA,EAFyB;;AAGjC,MAAMC,QAAQ,GAAGb,WAAW,EAA5B,CAHiC,CAKjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMc,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAE;AAC9Bb,IAAAA,MAAM,CAACc,UAAP,CAAkB;AACdC,MAAAA,QAAQ,EAAE,IAAIf,MAAM,CAACgB,QAAX,EADI;AAEdC,MAAAA,GAAG,EAAE,IAFS;AAGdC,MAAAA,MAAM,EAAE;AAHM,KAAlB;AAMA,QAAMC,MAAM,GAAGlB,SAAS,CAACmB,QAAV,CAAmBpB,MAAM,CAACa,KAAK,CAACQ,MAAP,CAAzB,CAAf,CAP4B,CAQ5B;;AACA,wBACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,uBAAuB,EAAG;AAACC,QAAAA,MAAM,EAAEH;AAAT;AAF9B;AAAA;AAAA;AAAA;AAAA,aADJ;AAMH,GAfD,CAzBiC,CA0CjC;;;AAEA,sBACI;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AAAEI,QAAAA,UAAU,EAAE,SAAd;AAAyBC,QAAAA,OAAO,EAAE;AAAlC,OAAZ;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAb;AAAoB,QAAA,QAAQ,EAAE,KAA9B;AAAqC,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAA5C;AAAA,+BACI,QAAC,IAAD,CAAM,IAAN;AACI,UAAA,WAAW,eACP;AAAA,mCACI,QAAC,YAAD;AAAc,cAAA,MAAM,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAgBH,CA5DD;;GAAMrB,W;UAEaL,W,EACED,W;;;KAHfM,W;AA8DNA,WAAW,CAACsB,SAAZ,GAAwB;AACpBrB,EAAAA,OAAO,EAAEf,SAAS,CAACqC,KAAV,CAAgB,CAAE;AAC3B;AACA;AACA;AAHyB,GAAhB;AADW,CAAxB;AAQA,eAAevB,WAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes, { nominalTypeHack } from 'prop-types';\r\nimport { Form, Input, Icon, Card, Avatar, Button } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport marked from 'marked';\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n} from '../reducers/post';\r\n\r\nconst ArticleCard = ({ article }) => {\r\n    console.log(article);\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    // const liked = me && post.Likers && post.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \r\n\r\n    // const onToggleLike = useCallback(() => {\r\n    //     if (!me) {\r\n    //         return alert('로그인이 필요합니다!');\r\n    //     }\r\n    //     if (liked) { // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \r\n    //         dispatch({\r\n    //             type: UNLIKE_POST_REQUEST,\r\n    //             data: post.id,\r\n    //         });\r\n    //     } else { // 좋아요 안 누른 상태에서, 하트를 누르면 \r\n    //         dispatch({\r\n    //             type: LIKE_POST_REQUEST,\r\n    //             data: post.id,\r\n    //         });\r\n    //     }\r\n    // }, [me && me.id, post && post.id, liked]);\r\n\r\n    // markdown 형식 -> 일반 글 형식 \r\n    const PreviewPanel = (props) => { // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\r\n        marked.setOptions({\r\n            renderer: new marked.Renderer(),   \r\n            gfm: true,\r\n            breaks: true,\r\n        });\r\n\r\n        const output = DOMPurify.sanitize(marked(props.mdText));\r\n        //console.log('output: ', output);\r\n        return (\r\n            <div \r\n                id='preview' \r\n                dangerouslySetInnerHTML= {{__html: output}}\r\n            />\r\n        );\r\n    }\r\n\r\n    //console.log('mainPosts: ', post)\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ background: '#ECECEC', padding: '30px' }}>\r\n                <Card title={'ddd'} bordered={false} style={{ width: 300 }}>\r\n                    <Card.Meta\r\n                        description={(\r\n                            <div>\r\n                                <PreviewPanel mdText={'ddd'}/>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                    </Card.Meta>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nArticleCard.propTypes = {\r\n    article: PropTypes.shape({ // shape: 객체 상태 \r\n    // User: PropTypes.object,\r\n    // content: PropTypes.string,\r\n    // createdAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\nexport default ArticleCard;"]},"metadata":{},"sourceType":"module"}
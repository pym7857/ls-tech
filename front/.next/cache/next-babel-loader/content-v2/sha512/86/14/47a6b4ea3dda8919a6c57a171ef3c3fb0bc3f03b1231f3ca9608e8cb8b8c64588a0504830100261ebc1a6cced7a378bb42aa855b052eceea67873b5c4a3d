{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ympark4\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Icon, Card, Avatar, Button } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport marked from 'marked';\nimport DOMPurify from \"dompurify\";\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \n\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태에서, 하트를 누르면 \n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]); // markdown 형식 -> 일반 글 형식 \n\n  const PreviewPanel = props => {\n    // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\n    marked.setOptions({\n      renderer: new marked.Renderer(),\n      gfm: true,\n      breaks: true\n    });\n    const output = DOMPurify.sanitize(marked(props.mdText)); //console.log('output: ', output);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"preview\",\n      dangerouslySetInnerHTML: {\n        __html: output\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    actions: [/*#__PURE__*/_jsxDEV(Icon, {\n      type: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }, \"heart\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)],\n    children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.User.id\n          }\n        },\n        as: `/user/${post.User.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            children: post.User.nickname[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this),\n      title: post.User.nickname,\n      description: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"[preview panel]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '20px',\n            fontWeight: 'bold'\n          },\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.subTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PreviewPanel, {\n          mdText: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"[hashtag panel]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), post.content.split(/(#[^\\s]+)/g).map(v => {\n          // 해시태그인 애들은 Link로 감싸준다 \n          if (v.match(/(#[\\S]+)/)) {\n            // ex) #사과<li>\n            //console.log(v.split('<')[0].slice(1));\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: {\n                pathname: '/hashtag',\n                query: {\n                  tag: v.split('<')[0].slice(1)\n                }\n              },\n              as: `/hashtag/${v.split('<')[0].slice(1)}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: [\"#\", v.split('<')[0].slice(1), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 71\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 41\n              }, this)\n            }, v, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this);\n          } //return v; // 해시태그 아닌애들은 그냥 문자열 리턴 \n\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, +post.createdAt, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    // shape: 객체 상태 \n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Link","PropTypes","Form","Input","Icon","Card","Avatar","Button","useDispatch","useSelector","marked","DOMPurify","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","PostCard","post","me","state","user","dispatch","liked","Likers","find","v","id","onToggleLike","alert","type","data","PreviewPanel","props","setOptions","renderer","Renderer","gfm","breaks","output","sanitize","mdText","__html","pathname","query","User","nickname","fontSize","fontWeight","title","subTitle","content","split","map","match","tag","slice","createdAt","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Icon, Card, Avatar, Button } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport marked from 'marked';\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n} from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        if (liked) { // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: post.id,\r\n            });\r\n        } else { // 좋아요 안 누른 상태에서, 하트를 누르면 \r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: post.id,\r\n            });\r\n        }\r\n    }, [me && me.id, post && post.id, liked]);\r\n\r\n    // markdown 형식 -> 일반 글 형식 \r\n    const PreviewPanel = (props) => { // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\r\n        marked.setOptions({\r\n            renderer: new marked.Renderer(),   \r\n            gfm: true,\r\n            breaks: true,\r\n        });\r\n\r\n        const output = DOMPurify.sanitize(marked(props.mdText));\r\n        //console.log('output: ', output);\r\n        return (\r\n            <div \r\n                id='preview' \r\n                dangerouslySetInnerHTML= {{__html: output}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            key={+post.createdAt}\r\n            actions={[\r\n                <Icon \r\n                    type=\"heart\" \r\n                    key=\"heart\"\r\n                    theme={liked ? 'twoTone' : 'outlined'}\r\n                    twoToneColor=\"#eb2f96\"\r\n                    onClick={onToggleLike} \r\n                />\r\n            ]}\r\n        >\r\n            <Card.Meta\r\n                avatar={(\r\n                    <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n                        <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                )}\r\n                title={post.User.nickname}\r\n                description={(\r\n                    <div>\r\n                        <p>[preview panel]</p>\r\n                        <p style={{ fontSize: '20px', fontWeight: 'bold' }}>{post.title}</p>\r\n                        <p>{post.subTitle}</p>\r\n                        <PreviewPanel mdText={post.content}/>\r\n\r\n                        <p>[hashtag panel]</p>\r\n                        {post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                            // 해시태그인 애들은 Link로 감싸준다 \r\n                            if (v.match(/(#[\\S]+)/)) { // ex) #사과<li>\r\n                                //console.log(v.split('<')[0].slice(1));\r\n                                return (\r\n                                    <Link href={{ pathname: '/hashtag', query: { tag: v.split('<')[0].slice(1) } }} as={`/hashtag/${v.split('<')[0].slice(1)}`} key={v}>\r\n                                        <a>#{v.split('<')[0].slice(1)}<br /></a>\r\n                                    </Link>\r\n                                );\r\n                            }\r\n                            //return v; // 해시태그 아닌애들은 그냥 문자열 리턴 \r\n                        })}\r\n                    </div>\r\n                )}\r\n            >\r\n            </Card.Meta>\r\n        </Card>\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({ // shape: 객체 상태 \r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ympark4/Documents/GitHub/ls-tech/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ympark4/Documents/GitHub/ls-tech/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ympark4\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\pages\\\\article.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Link from 'next/link';\nimport { Card, Avatar, Icon } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport marked from 'marked';\nimport DOMPurify from \"dompurify\";\nimport { LIKE_POST_REQUEST, LOAD_ARTICLE_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\n\nvar Article = function Article(_ref) {\n  _s();\n\n  var id = _ref.id;\n  // getInitialProps로부터 전달받은 props \n  //console.log(id);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      article = _useSelector2.article;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_ARTICLE_REQUEST,\n      data: id\n    });\n  }, []);\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  }); // 좋아요 누른 상태 \n\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: id\n      });\n    } else {\n      // 좋아요 안 누른 상태에서, 하트를 누르면 \n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: id\n      });\n    }\n  }, [me && me.id, id, liked]); // markdown 형식 -> 일반 글 형식 \n\n  var PreviewPanel = function PreviewPanel(props) {\n    // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\n    marked.setOptions({\n      renderer: new marked.Renderer(),\n      gfm: true,\n      breaks: true\n    });\n    console.log('props: ', props);\n    var output = DOMPurify.sanitize(marked(props.mdText)); //console.log('output: ', output);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"preview\",\n      dangerouslySetInnerHTML: {\n        __html: output\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, _this);\n  };\n\n  console.log('article: ', article);\n  return (\n    /*#__PURE__*/\n    // 해당 제목에 해당하는 게시글 보여줌 \n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#ECECEC',\n          padding: '30px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          actions: [/*#__PURE__*/_jsxDEV(Icon, {\n            type: \"heart\",\n            theme: liked ? 'twoTone' : 'outlined',\n            twoToneColor: \"#eb2f96\",\n            onClick: onToggleLike\n          }, \"heart\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, _this)],\n          title: article.title,\n          bordered: false,\n          children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n            description: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(PreviewPanel, {\n                mdText: 'd'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, _this)\n        }, +article.createdAt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, _this)\n  );\n};\n\n_s(Article, \"4Tzsnl6E3b5rlNQPxWKNIkH+3VQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Article;\nArticle.propTypes = {\n  id: PropTypes.number.isRequired\n};\n\nArticle.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('article getInitialProps', context.query.id);\n            return _context.abrupt(\"return\", {\n              id: context.query.id\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Article;\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/pages/article.js"],"names":["React","useEffect","Link","Card","Avatar","Icon","PropTypes","useDispatch","useSelector","marked","DOMPurify","LIKE_POST_REQUEST","LOAD_ARTICLE_REQUEST","UNLIKE_POST_REQUEST","Article","id","dispatch","state","user","me","post","article","type","data","liked","Likers","find","v","onToggleLike","useCallback","alert","PreviewPanel","props","setOptions","renderer","Renderer","gfm","breaks","console","log","output","sanitize","mdText","__html","background","padding","title","createdAt","propTypes","number","isRequired","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { Card, Avatar, Icon } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport marked from 'marked';\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport { LIKE_POST_REQUEST, LOAD_ARTICLE_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\r\n\r\nconst Article = ({ id }) => { // getInitialProps로부터 전달받은 props \r\n    //console.log(id);\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector(state => state.user);\r\n    const { article } = useSelector(state => state.post);\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: LOAD_ARTICLE_REQUEST,\r\n            data: id,\r\n        });\r\n    }, []);\r\n\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        if (liked) { // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: id,\r\n            });\r\n        } else { // 좋아요 안 누른 상태에서, 하트를 누르면 \r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: id,\r\n            });\r\n        }\r\n    }, [me && me.id, id, liked]);\r\n\r\n    // markdown 형식 -> 일반 글 형식 \r\n    const PreviewPanel = (props) => { // post.content   ex) <p>해시태그도 써볼까</p><ul><li>#md성공 #md</li><li>될까?</li></ul>\r\n        marked.setOptions({\r\n            renderer: new marked.Renderer(),   \r\n            gfm: true,\r\n            breaks: true,\r\n        });\r\n\r\n        console.log('props: ', props)\r\n        const output = DOMPurify.sanitize(marked(props.mdText));\r\n        //console.log('output: ', output);\r\n        return (\r\n            <div \r\n                id='preview' \r\n                dangerouslySetInnerHTML= {{__html: output}}\r\n            />\r\n        );\r\n    }\r\n\r\n    console.log('article: ', article);\r\n\r\n    return ( // 해당 제목에 해당하는 게시글 보여줌 \r\n        <div>\r\n            <div style={{ background: '#ECECEC', padding: '30px' }}>\r\n                <Card \r\n                    key={+article.createdAt}\r\n                    actions={[\r\n                        <Icon \r\n                            type=\"heart\" \r\n                            key=\"heart\"\r\n                            theme={liked ? 'twoTone' : 'outlined'}\r\n                            twoToneColor=\"#eb2f96\"\r\n                            onClick={onToggleLike} \r\n                        />\r\n                    ]}\r\n                    title={article.title} \r\n                    bordered={false} \r\n                >\r\n                    <Card.Meta\r\n                        description={(\r\n                            <div>\r\n                                <PreviewPanel mdText={'d'}/>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                    </Card.Meta>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nArticle.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n};\r\n\r\nArticle.getInitialProps = async (context) => {\r\n  console.log('article getInitialProps', context.query.id);\r\n  return { id: context.query.id }; // 서버로부터 받은 데이터 --> 프론트의 props로 전달 \r\n                                     // 현재 파일: 7번째 줄 ! \r\n};\r\n\r\nexport default Article;"]},"metadata":{},"sourceType":"module"}
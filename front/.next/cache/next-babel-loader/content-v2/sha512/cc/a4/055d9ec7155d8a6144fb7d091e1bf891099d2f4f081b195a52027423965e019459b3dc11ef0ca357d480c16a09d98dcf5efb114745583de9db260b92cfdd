{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ympark4\\\\Documents\\\\GitHub\\\\ls-tech\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Icon, Card, Avatar } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \n  //console.log('liked:', liked);\n\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태에서, 하트를 누르면 \n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]); //console.log('(postCard) post:', post);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    actions: [/*#__PURE__*/_jsxDEV(Icon, {\n      type: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }, \"heart\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)],\n    children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.User.id\n          }\n        },\n        as: `/user/${post.User.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            children: post.User.nickname[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this),\n      title: post.User.nickname,\n      description: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: {\n              pathname: '/article',\n              query: {\n                id: post.id\n              }\n            },\n            as: `/article/${post.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  fontSize: '30px',\n                  fontWeight: 'bold',\n                  color: 'black',\n                  marginBottom: '-2px'\n                },\n                children: post.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: post.subTitle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: post.createdAt.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), post.content.split(/(#[^\\s]+)/g).map(v => {\n          // 해시태그인 애들은 Link로 감싸준다 \n          if (v.match(/(#[\\S]+)/)) {\n            // ex) #사과<li>\n            //console.log(v.split('<')[0].slice(1));\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: {\n                pathname: '/hashtag',\n                query: {\n                  tag: v.split('<')[0].slice(1)\n                }\n              },\n              as: `/hashtag/${v.split('<')[0].slice(1)}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                style: {\n                  color: '#3f729b'\n                },\n                children: [\"#\", v.split('<')[0].slice(1), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this)\n            }, v, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this);\n          } //return v; // 해시태그 아닌애들은 그냥 문자열 리턴 \n\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, +post.createdAt, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    // shape: 객체 상태 \n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Link","PropTypes","Icon","Card","Avatar","useDispatch","useSelector","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","PostCard","post","me","state","user","dispatch","liked","Likers","find","v","id","onToggleLike","alert","type","data","pathname","query","User","nickname","fontSize","fontWeight","color","marginBottom","title","subTitle","createdAt","split","content","map","match","tag","slice","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon, Card, Avatar } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n} from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id); // 좋아요 누른 상태 \r\n\r\n    //console.log('liked:', liked);\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        if (liked) { // 좋아요 누른 상태에서, 하트를 한번 더 누르면 \r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: post.id,\r\n            });\r\n        } else { // 좋아요 안 누른 상태에서, 하트를 누르면 \r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: post.id,\r\n            });\r\n        }\r\n    }, [me && me.id, post && post.id, liked]);\r\n\r\n    //console.log('(postCard) post:', post);\r\n\r\n    return (\r\n        <Card\r\n            key={+post.createdAt}\r\n            actions={[\r\n                <Icon \r\n                    type=\"heart\" \r\n                    key=\"heart\"\r\n                    theme={liked ? 'twoTone' : 'outlined'}\r\n                    twoToneColor=\"#eb2f96\"\r\n                    onClick={onToggleLike} \r\n                />\r\n            ]}\r\n        >\r\n            <Card.Meta\r\n                avatar={(\r\n                    <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n                        <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                )}\r\n                title={post.User.nickname}\r\n                description={(\r\n                    <div>\r\n                        <div>\r\n                            <Link href={{ pathname: '/article', query: { id: post.id } }} as={`/article/${post.id}`} >\r\n                                <a>\r\n                                    <p style={{ fontSize: '30px', fontWeight: 'bold', color: 'black', marginBottom: '-2px'}}>{post.title}</p>\r\n                                    <p>{post.subTitle}</p>\r\n                                    <p>{post.createdAt.split('T')[0]}</p>\r\n                                </a>\r\n                            </Link>\r\n                        </div>\r\n\r\n                        {post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                            // 해시태그인 애들은 Link로 감싸준다 \r\n                            if (v.match(/(#[\\S]+)/)) { // ex) #사과<li>\r\n                                //console.log(v.split('<')[0].slice(1));\r\n                                return (\r\n                                    <Link href={{ pathname: '/hashtag', query: { tag: v.split('<')[0].slice(1) } }} as={`/hashtag/${v.split('<')[0].slice(1)}`} key={v}>\r\n                                        <a style={{ color: '#3f729b' }}>#{v.split('<')[0].slice(1)} </a>\r\n                                    </Link>\r\n                                );\r\n                            }\r\n                            //return v; // 해시태그 아닌애들은 그냥 문자열 리턴 \r\n                        })}\r\n                    </div>\r\n                )}\r\n            >\r\n            </Card.Meta>\r\n        </Card>\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({ // shape: 객체 상태 \r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}
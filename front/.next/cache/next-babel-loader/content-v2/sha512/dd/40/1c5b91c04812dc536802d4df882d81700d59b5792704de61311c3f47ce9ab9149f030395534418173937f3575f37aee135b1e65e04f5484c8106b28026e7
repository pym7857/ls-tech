{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    // userId(남의정보) 있을때 vs 없을때 \n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  // 내 정보뿐만 아니라, 남의정보도 같이 불러올 수 있도록 수정 --> action추가 \n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data // action(=남의 아이디)없으면, 내 정보 불러오기 \n\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/sagas/user.js"],"names":["all","call","fork","put","takeEvery","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_USER_FAILURE,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(loginData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/login', loginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\n\r\nfunction logOutAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/logout', {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI(userId) { \r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(userId ? `/user/${userId}` : '/user/', { // userId(남의정보) 있을때 vs 없을때 \r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* loadUser(action) { // 내 정보뿐만 아니라, 남의정보도 같이 불러올 수 있도록 수정 --> action추가 \r\n  try {\r\n    const result = yield call(loadUserAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n      me: !action.data, // action(=남의 아이디)없으면, 내 정보 불러오기 \r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchLoadUser),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}
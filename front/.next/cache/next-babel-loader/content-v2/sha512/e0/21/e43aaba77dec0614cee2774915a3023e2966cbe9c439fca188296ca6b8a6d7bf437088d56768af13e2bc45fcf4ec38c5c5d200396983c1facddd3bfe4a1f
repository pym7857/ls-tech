{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ympark4/Documents/GitHub/ls-tech/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(loadAllHashtags),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadAllHashtags),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(loadArticle),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadArticle),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LOAD_ALL_HASHTAGS_FAILURE, LOAD_ALL_HASHTAGS_REQUEST, LOAD_ALL_HASHTAGS_SUCCESS, LOAD_ARTICLE_FAILURE, LOAD_ARTICLE_REQUEST, LOAD_ARTICLE_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          _context.next = 7;\n          return put({\n            // post reducer의 데이터를 수정 \n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            // user reducer의 데이터를 수정 \n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 로그인안한 사용자들도 글 목록 볼 수 있음 --> withCredentials: true 넣어줄 필요 X \n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              // 해당 게시물 id \n              userId: result.data.userId // 좋아요 누른사람의 id \n\n            }\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              // 해당 게시물 id \n              userId: result.data.userId // 좋아요 취소한사람의 id \n\n            }\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction loadAllHashtagsAPI() {\n  return axios.get('/hashtags');\n}\n\nfunction loadAllHashtags() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadAllHashtags$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(loadAllHashtagsAPI);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: LOAD_ALL_HASHTAGS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 12;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          _context13.next = 12;\n          return put({\n            type: LOAD_ALL_HASHTAGS_FAILURE,\n            error: _context13.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchLoadAllHashtags() {\n  return _regeneratorRuntime.wrap(function watchLoadAllHashtags$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(LOAD_ALL_HASHTAGS_REQUEST, loadAllHashtags);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction loadArticleAPI(postId) {\n  return axios.get(\"/post/\".concat(postId));\n}\n\nfunction loadArticle(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadArticle$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(loadArticleAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LOAD_ARTICLE_SUCCESS,\n            data: result.data // article \n\n          });\n\n        case 6:\n          _context15.next = 12;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          _context15.next = 12;\n          return put({\n            type: LOAD_ARTICLE_FAILURE,\n            error: _context15.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLoadArticle() {\n  return _regeneratorRuntime.wrap(function watchLoadArticle$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LOAD_ARTICLE_REQUEST, loadArticle);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadAllHashtags), fork(watchLoadArticle)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}","map":{"version":3,"sources":["C:/Users/ympark4/Documents/GitHub/ls-tech/front/sagas/post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","likePost","watchLikePost","unlikePost","watchUnlikePost","loadAllHashtags","watchLoadAllHashtags","loadArticle","watchLoadArticle","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LOAD_ALL_HASHTAGS_FAILURE","LOAD_ALL_HASHTAGS_REQUEST","LOAD_ALL_HASHTAGS_SUCCESS","LOAD_ARTICLE_FAILURE","LOAD_ARTICLE_REQUEST","LOAD_ARTICLE_SUCCESS","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","action","data","result","console","log","type","id","error","loadMainPostsAPI","get","loadHashtagPostsAPI","tag","loadUserPostsAPI","likePostAPI","postId","userId","unlikePostAPI","loadAllHashtagsAPI","loadArticleAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS, \r\n  UNLIKE_POST_FAILURE, \r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  LOAD_ALL_HASHTAGS_FAILURE,\r\n  LOAD_ALL_HASHTAGS_REQUEST,\r\n  LOAD_ALL_HASHTAGS_SUCCESS,\r\n  LOAD_ARTICLE_FAILURE,\r\n  LOAD_ARTICLE_REQUEST,\r\n  LOAD_ARTICLE_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    console.log(result);\r\n    yield put({ // post reducer의 데이터를 수정 \r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({ // user reducer의 데이터를 수정 \r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id, \r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n  return axios.get('/posts'); // 로그인안한 사용자들도 글 목록 볼 수 있음 --> withCredentials: true 넣어줄 필요 X \r\n}\r\nfunction* loadMainPosts() {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`);\r\n}\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`);\r\n}\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data, // 해당 게시물 id \r\n        userId: result.data.userId, // 좋아요 누른사람의 id \r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}/like`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data, // 해당 게시물 id \r\n        userId: result.data.userId, // 좋아요 취소한사람의 id \r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction loadAllHashtagsAPI() {\r\n  return axios.get('/hashtags');\r\n}\r\nfunction* loadAllHashtags() {\r\n  try {\r\n    const result = yield call(loadAllHashtagsAPI);\r\n    yield put({\r\n      type: LOAD_ALL_HASHTAGS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_ALL_HASHTAGS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadAllHashtags() {\r\n  yield takeLatest(LOAD_ALL_HASHTAGS_REQUEST, loadAllHashtags);\r\n}\r\n\r\nfunction loadArticleAPI(postId) {\r\n  return axios.get(`/post/${postId}`);\r\n}\r\nfunction* loadArticle(action) {\r\n  try {\r\n    const result = yield call(loadArticleAPI, action.data);\r\n    yield put({\r\n      type: LOAD_ARTICLE_SUCCESS,\r\n      data: result.data, // article \r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_ARTICLE_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadArticle() {\r\n  yield takeLatest(LOAD_ARTICLE_REQUEST, loadArticle);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchLoadAllHashtags),\r\n    fork(watchLoadArticle),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}